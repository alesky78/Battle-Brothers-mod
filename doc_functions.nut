// Analysis of BB Root Table

README
// C++ classes have a __getTable and __setTable, the values in these tables are effetively fields for the class, but the way they work is a little unique
// if SomeValueInGetTable is in the __getTable, that means you can get its value by doing something like
myclass = NewCPLusPLusClass();
local value = myclass.SomeValueInGetTable;
// if SomeValueInSetTable is in the __setTable, that means you can 'set' this value by doing something like
myclass.SomeValueInSetTable = value;
// NOTE: this doesn't necessarily mean you've actually set this value, this is more like a function call with a single parameter and the value you've passed is the one argument for that function.
// though this does usually set the value.

// if a function starts with __sqrat_ol_, that means it's a C++ overload of a function of the 'same' name, for example, ::Math.rand has two such overload, "__sqrat_ol_ rand_0" and "__sqrat_ol_ rand_2",
// if you call ::Math.rand(), it is equivalent to calling ::Math["__sqrat_ol_ rand_0"]()
// and if you call ::Math.rand(0,5), that is equivalent to calling ::Math["__sqrat_ol_ rand_2"](0,5)
// NOTE: these overloading functions don't seem to check for the number of arguments you are passing to them correctly and therefore allow you to pass as many arguments as you want
// and so they probably shouldn't be used directly

// Constants
_charsize_ = 1,
_intsize_ = 4,
_versionnumber_ = 304,
RAND_MAX = 32767,
_floatsize_ = 4,
PI = 3.14159,
_version_ = "Squirrel 3.0.4 stable",

// Native squirrel functions
function split(),
function getstackinfos(),
function assert(),
function strip(),
function lstrip(),
function rstrip(),
function compilestring(), // lets you run squirrel code
function setroottable(),
function suspend(),
function type(),
function format(),
function print(), // doesn't do anything
function getconsttable(), // Contains bb enums for various values including Key, KeyState, Mouse, KeyModifier, and KeyFire (keyfire seems like its supposed to be a way to detect between a single press and a continuous one, but it is instead identical to getState)
function setconsttable(),
function getroottable(),
function array(),
function callee()
function seterrorhandler(),
function newthread(),

// native math library functions
function rand(),
function srand(),
function ceil(),
function tan(),
function pow(),
function sqrt(),
function abs(),
function atan2(),
function asin(),
function atan(),
function cos(),
function fabs(),
function log10(),
function floor(),
function exp(),
function acos(),
function log(),
function sin(),

// __sqrat_ol_ is argument overloading for native functions

// bb specific maths functions
Math = {
	function rand(),
	function __sqrat_ol_ rand_0(), // calls and returns native ::rand()
	function __sqrat_ol_ rand_2(), // 2 argument rand
	function min(),
	function minf(),
	function max(),
	function maxf(),
	function abs(),
	function absf(),
	function seedRandom(), // seeds Math.rand
	function seedRandomString(), // seeds Math.rand
	function ceil(),
	function floor(),
	function pow(),
	function round(),
	function getAngleTo()
},

// Classes
class regexp {}, // native squirrel class
class WeakTableRef {}, // defined in scripts/tools/weak_table_ref.nut
class color { // generated by createColor/createColorRGB/createColorWhite
	__getTable = {
		R = 0,
		G = 0,
		B = 0,
		A = 0,
		RGBA = 0
	}
	__setTable = {
		R = 0,
		G = 0,
		B = 0,
		A = 0,
		RGBA = 0
	}
	function varyRGB()
}, 
class ControlSettings { // class for ::Settings.getControlSettings();
	__getTable = {
		UseHardwareCursor = false,
		UseDragStyleScrolling = false
	}
	__setTable = {
		UseHardwareCursor = false,
		UseDragStyleScrolling = false
	}
}, 
class TacticalNavigator { // class for ::Tactical.getNavigator()
	__getTable = {
		IsTravelling = false,
		HasValidPath = false,
		NumPathWaypoints = null 
	},
	__setTable = {},
	function getTurnsRequiredForPath()
	function __sqrat_ol_ getTurnsRequiredForPath_3()
	function __sqrat_ol_ getTurnsRequiredForPath_5()
	function teleport()
	function __sqrat_ol_ teleport_5()
	function __sqrat_ol_ teleport_6()
	function buildVisualisation()
	function switchEntities()
	function render()
	function findPath()
	function isTravelling()
	function clipPathToDistance()
	function popLastWaypoint()
	function getCostForPath()
	function update()
	function createSettings()
	function getLastSettings()
	function clearPath()
	function clearVisualisation()
	function travel()
}, 
class WorldCameraBridge { // class for ::World.getCamera()
	__getTable = {
		Zoom = 0.0,
		IsFlipped = false,
		Level = 0
	},
	__setTable = {
		Zoom = 0.0,
		Level = 0
	},
	function isInsideScreen()
	function __sqrat_ol_ isInsideScreen_1()
	function __sqrat_ol_ isInsideScreen_2()
	function screenToWorld()
	function __sqrat_ol_ screenToWorld_2()
	function __sqrat_ol_ screenToWorld_1()
	function moveToPos()
	function __sqrat_ol_ moveToPos_1()
	function __sqrat_ol_ moveToPos_2()
	function __sqrat_ol_ moveToPos_3()
	function move()
	function __sqrat_ol_ move_1()
	function __sqrat_ol_ move_2()
	function setPos()
	function __sqrat_ol_ setPos_1()
	function __sqrat_ol_ setPos_2()
	function unregisterCallbacks()
	function climbBy()
	function moveToTile()
	function updateEntityOverlays()
	function queryEntityOverlays()
	function registerCallbacks()
	function addEntityOverlay()
	function zoomBy()
	function removeEntityOverlay()
	function zoomTo()
 	function jumpTo()
	function moveTo()
	function cancelMovement()
	function isMovingToTile()
	function render()
	function update()
	function removeEntityOverlays()
	function isCenteredOnPos()
	function getPos()
	function worldToScreen()
}, 
class vec2f {
	__getTable = {
		X = 0.0
		Y = 0.0,
	}
	__setTable = {
		X = 0.0
		Y = 0.0,
	}
},
class vec2i {
	__getTable = {
		X = 0
		Y = 0,
	}
	__setTable = {
		X = 0
		Y = 0,
	}
},
class VideoMode { // class for ::Settings.getVideoMode(), holds various graphics settings including potentially adding an option to limit FPS?
	__getTable = {
		Borderless = false,
		Fullscreen = false,
		SceneScale = 0.0,
		UIScale = 0.0,
		DepthOfField = false,
		Height = 0,
		Width = 0,
		Gamma = 0.0,
		Brightness = 0.0,
		ColorBits = 0,
		RefreshRate = 0,
		VSync = false,
		LimitFrameRate = false
	}
	__setTable = {
		Borderless = false,
		Fullscreen = false,
		SceneScale = 0.0,
		UIScale = 0.0,
		DepthOfField = false,
		Height = 0,
		Width = 0,
		Gamma = 0.0,
		Brightness = 0.0,
		ColorBits = 0,
		RefreshRate = 0,
		VSync = false,
		LimitFrameRate = false
	}
},
class TacticalShaker { // class for ::Tactical.getShaker()
	__getTable = {}
	__setTable = {}
	function cancel()
	function shake()
	function __sqrat_ol_ shake_3()
	function __sqrat_ol_ shake_9()
},
class WorldWeather { // class for ::World.getWeather()
	__getTable = {}
	__setTable = {}
	function clear()
	function buildBirds()
	function buildCloudCover()
	function createBirdSettings()
	function createCloudSettings()
},
class TacticalWeather { // class for ::Tactical.getWeather()
	__getTable = {
		IsRaining = false
	}
	__setTable = {}
	function clear()
	function setAmbientLightingPreset()
	function setAmbientLightingColor()
	function setAmbientLightingSaturation()
	function createRainSettings()
	function createCloudSettings()
	function buildCloudCover()
	function buildRain()
},
class WorldTile { // presumably the class used for worldmap tiles
	__getTable = {
		IsFlipped = false,
		IsDiscovered = false,
		IsOccupied = false
		HasRoad = false,
		HasRiver = false,
		RiverDirections = null,
		Subtype = null,
		Properties = null,
		RoadDirections = null,
		Pos = null,
		ZOffset = null,
		Subregion = null,
		Region = null,
		Type = null,
		ID = null,
		Y = null,
		X = null,
		Coords = null,
		SquareCoords = null,
		TacticalType = null,
		HeatFromSettlements = null,
	}
	__setTable = {
		IsFlipped = false,
		IsDiscovered = false,
		IsOccupied = false,
		HasRoad = false,
		HasRiver = false,
		ZOffset = null,
		RiverDirections = null,
		Type = null,
		Subregion = null,
		Subtype = null,
		Region = null,
		RoadDirections = null,
		HeatFromSettlements = null,
		TacticalType = null
	}
	function clear()
	function __sqrat_ol_ clear_0()
	function __sqrat_ol_ clear_1()
	function setColor()
	function __sqrat_ol_ setColor_1()
	function __sqrat_ol_ setColor_3()
	function getDistanceTo()
	function __sqrat_ol_ getDistanceTo_1()
	function __sqrat_ol_ getDistanceTo_2()
	function clearAllBut()
	function __sqrat_ol_ clearAllBut_1() // not sure why there's only one overloaded function here?
	function spawnDetail()
	function __sqrat_ol_ spawnDetail_3()
	function __sqrat_ol_ spawnDetail_4()
	function __sqrat_ol_ spawnDetail_5()
	function __sqrat_ol_ spawnDetail_6()
	function getDirectionTo()
	function getDirection8To()
	function resetBrush()
	function isSameTileAs()
	function getSurroundingTilesOfType()
	function getTileBetweenThisAnd()
	function getPosBetweenThisAnd()
	function getNextTile()
	function clearAndFade()
	function hasNextTile()
	function setBrush()
	function getSurroundingTilesNotOfType()
	function getBrush()
	function hasDetailType()
},
class TempGameplaySettings { // class for ::Settings.getTempGameplaySettings()
	__getTable = {
		ShowTracking = false,
		HideTrees = false,
		FasterPlayerMovement = false,
		ShowOverlayStats = false,
		HighlightBlockedTiles = false,
		CameraLocked = false,
		FasterAIMovement = false
	},
	__setTable = {
		ShowTracking = false,
		HideTrees = false,
		FasterPlayerMovement = false,
		ShowOverlayStats = false,
		HighlightBlockedTiles = false,
		CameraLocked = false,
		FasterAIMovement = false
	}
}, // 
class WorldNavigator { // class for ::World.getNavigator()
	__getTable = {}
	__setTable = {}
	function render()
	function update()
	function getLastSettings()
	function createSettings()
	function findPath()
},
class TacticalCameraBridge { // class for ::Tactical.getCamera()
	__getTable = {
		Zoom = 0.0,
		IsFlipped = false,
		Level = 0
	},
	__setTable = {
		Zoom = 0.0,
		Level = 0
	},
	function isInsideScreen()
	function __sqrat_ol_ isInsideScreen_2()
	function __sqrat_ol_ isInsideScreen_1()
	function setPos()
	function __sqrat_ol_ setPos_1()
	function __sqrat_ol_ setPos_2()
	function screenToWorld()
	function __sqrat_ol_ screenToWorld_2()
	function __sqrat_ol_ screenToWorld_1()
	function move()
	function __sqrat_ol_ move_1()
	function __sqrat_ol_ move_2()
	function moveToPos()
	function __sqrat_ol_ moveToPos_1()
	function __sqrat_ol_ moveToPos_2()
	function __sqrat_ol_ moveToPos_3()
	function moveTo()
	function __sqrat_ol_ moveTo_1()
	function __sqrat_ol_ moveTo_2()
	function moveToTile()
	function __sqrat_ol_ moveToTile_1()
	function __sqrat_ol_ moveToTile_2()
	function quake()
	function __sqrat_ol_ quake_4()
	function __sqrat_ol_ quake_5()
	function jumpTo()
	function __sqrat_ol_ jumpTo_1() // once again single overloaded function, not sure what's up with those
	function unregisterCallbacks()
	function climbBy()
	function setLevelToHighestOnMap()
	function updateEntityOverlays()
	function queryEntityOverlays()
	function registerCallbacks()
	function isMoving()
	function isCenteredOnTile()
	function isCenteredOn()
	function isMovingToTile()
	function moveToTileSlowly()
	function addEntityOverlay()
	function zoomBy()
	function removeEntityOverlay()
	function getBestLevelForTile()
	function zoomTo()
	function worldToScreen()
	function cancelMovement()
	function render()
	function update()
	function removeEntityOverlays()
	function isCenteredOnPos()
	function getPos()
	function moveToExactly()
},
class TacticalTile { // presumably the class used for tactical tiles
	__getTable = {
		IsBadTerrain = false,
		IsDiscovered = false,
		IsDefensibleTerrain = false,
		IsVisibleForEntity = false,
		IsVisibleForPlayer = false,
		IsCorpseSpawned = false,
		IsSpecialTerrain = false,
		IsOccupiedByActor = false,
		IsHidingEntity = false,
		IsContainingItemsFlipped = false,
		IsContainingItems = false,
		IsEmpty = false,
		Level = 0,
		Y = 0,
		X = 0,
		BlendPriority = null,
		Properties = null,
		Pos = null,
		TVTotal = null,
		Coords = null,
		TVHeight = null,
		TVTerrain = null,
		ID = null,
		TVLevelDisadvantage = null,
		SquareCoords = null,
		Type = null,
		Items = null,
		Subtype = null,
	}
	__setTable = {
		Level = 0,
		IsBadTerrain = false,
		IsDefensibleTerrain = false
		IsHidingEntity = false,
		IsSpecialTerrain = false,
		IsContainingItems = false,
		IsContainingItemsFlipped = false,
		Type = null,
		BlendPriority = null,
		Subtype = null,
	}
	function spawnDetail()
	function __sqrat_ol_ spawnDetail_1()
	function __sqrat_ol_ spawnDetail_3()
	function __sqrat_ol_ spawnDetail_2()
	function __sqrat_ol_ spawnDetail_5()
	function __sqrat_ol_ spawnDetail_4()
	function clear()
	function __sqrat_ol_ clear_0()
	function __sqrat_ol_ clear_1()
	function getDirectionTo()
	function __sqrat_ol_ getDistanceTo_1()
	function __sqrat_ol_ getDistanceTo_2()
	function setColor()
	function __sqrat_ol_ setColor_1()
	function __sqrat_ol_ setColor_3()
	function getZoneOfOccupationCount()
	function isSameTileAs()
	function addZoneOfControl()
	function hasZoneOfControlOtherThan()
	function removeZoneOfOccupation()
	function removeZoneOfControl()
	function hasLineOfSightTo()
	function addVisibilityForFaction()
	function getTileBetweenThisAnd()
	function getPosBetweenThisAnd()
	function addVisibilityForCurrentEntity()
	function removeObject()
	function getZoneOfControlCount()
	function getNextTile()
	function spawnObject()
	function getDirection8To()
	function hasNextTile()
	function getZoneOfControlCountOtherThan()
	function getZoneOfOccupationCountOtherThan()
	function hasZoneOfOccupationOtherThan()
	function getDistanceTo()
	function setBrush()
	function addZoneOfOccupation()
	function getEntity()
},
class TacticalHighlighter { // class for ::Tactical.getHighlighter()
	function clearOverlayIcons()
	function clear()
	function addOverlayIcon()
	function clearHighlights()
	function highlightZoneOfControl()
	function highlightRangeOfSkill()
}, 
class WorldNavigationPath { // class returned by WorldNavigator.findPath()
	function pushFront()
	function isAtWaypoint()
	function pop()
	function getSize()
	function pushBack()
	function getLast()
	function getNextNext()
	function getCurrent()
	function isEmpty()
	function getNext()
},

// Logging
function logError(),
function logInfo(),
function logDebug(),
function logWarning(),
function error(), // Equivalent to logError, but with a 'Script' source rather than 'SQ', 
function logBeginGroup(), // doesn't actually do anything, it has a functioning equivalent in the hidden console
function logEndGroup(), // doesn't actually do anything, it has a functioning equivalent in the hidden console

// Brushes
function createColor(), // returns color instance, takes "#ffffff" as arg
function createColorRGB(), // return color instance, takes 255, 255, 255 as args
function createColorWhite(), // returns color instance, no args

// BB OBjects
TooltipEvents = ::WeakTableRef(::new("scripts/ui/screens/tooltip/tooltip_events")),
UIDataHelper = ::new("scripts/ui/global/data_helper"),
Tooltip = ::WeakTableRef(::new("scripts/ui/screens/tooltip/modules/tooltip")),
MapGen = ::new("scripts/mapgen/map_generator"),
RootState = { // scripts/root_state.nut but with some additional functions:
	function isBackgroundTaskSuspended(),
	function setBackgroundTaskCallback()},
Root = ::RootState, // this is RootState. Not sure why both exist but vanilla does use both lol
LoadingScreen = ::new("scripts/ui/screens/loading/loading_screen"),
TooltipScreen = ::new("scripts/ui/screens/tooltip/tooltip_screen"),
Cursor = ::new("scripts/ui/global/cursor"),
DialogScreen = ::new("scripts/ui/screens/dialog_screen"), 

// Minor BB Functions
function isReleaseBuild(),
function isScenarioDemo(),
function hasDLC(),
function isSteamBuild(),
function isDevmode(),

// Potentially useful
function removeFromBeginningOfText(),
function printStack(), // this doesn't format anywhere near as nicely as ::MSU.Log.printStackTrace, and for some reason it excludes variables from the topmost level, but would've been nice to know about way earlier
function isFirstCharacter(), // takes 2 args, first arg is a string, second arg is an array of strings, returns true if the strings startswith any string in the array of strings
function doesBrushExist(), // checks if a brush with the passed name exists
function hexStringToInt(), // self-explanatory

// Known
function new(),
function include(),
function inherit(),
function buildTextFromTemplate(),
function setPersistentStat(), // this is unfortunately useless as it is only able to set CrisesDefeatedOnIronman
function getPersistentStat(), // this is unfortunately useless as it is only able to get CrisesDefeatedOnIronman
function updateAchievement(), // informs steam when player gets an achievement
function hasAchievement(),
function isKindOf(), // equivalent to instanceof for bb objects, except this doesn't handle WeakTableRefs (::MSU.isKindOf does)
function createTileTransition(), // generates the borders between two tiles to smooth the transition

// Vector stuffs
function getVecDir(),
function createVec(),
function getVecDistance(),

// ??
function resurrectunreachable(),
function dummy(),
function storeStatistics(), // called once in main_menu_state.nut
function reloadTextures(),
function crash(), // doesn't seem to crash the game when run, requires 1 arg
function collectgarbage(), // GC? that's potentially cool
function enabledebuginfo(),
function isModified(),
function toHash(), // some sort of hashing function, but I couldn't immediately identify it
function isSomethingToSee(),
function __ping(),

// Other unimportant
Const = Table,

// String manipulation
String = {
	function contains(),
	function replace(),
	function remove()
},

Tactical = {
	function spawnEntity(), // spawns entity at passed coords, overloaded by below functions based on number of coords
	function __sqrat_ol_ spawnEntity_1(), // needs a script path, spawns the entity at ::Tactical.State.m.LastTileHovered
	function __sqrat_ol_ spawnEntity_2(), // needs a script path and TacticalTile.Coords
	function __sqrat_ol_ spawnEntity_3(), // needs a script path and x and y integers
	function __sqrat_ol_ spawnEntity_4(), // 4th parameter is only used in lindwurm.nut when spawning its tail, the ID of the lindwurm is passed, not sure what's going on there
	function tileToWorld(),
	function __sqrat_ol_ tileToWorld_1(),
	function __sqrat_ol_ tileToWorld_2(),
	function getTile(),
	function __sqrat_ol_ getTile_1(),
	function __sqrat_ol_ getTile_2(),
	function queryTilesInRange()
	function __sqrat_ol_ queryTilesInRange_7(),
	function __sqrat_ol_ queryTilesInRange_8(),
	function spawnParticleEffect(),
	function __sqrat_ol_ spawnParticleEffect_8(),
	function __sqrat_ol_ spawnParticleEffect_9(),
	function setBlockedTileHighlightsVisibility(),
	function getEntityByID(),
	function getTileSquare(),
	function spawnHeadEffect(),
	function render(),
	function getWeather(),
	function setVisible(),
	function getSurvivorRoster(),
	function setTransitions(),
	function fillVisibility(),
	function isVisible(),
	function resizeScene(),
	function getCamera(),
	function setAmbientColor(),
	function getNavigator(),
	function clearHeat(),
	function isActive(),
	function loadResources(),
	function addEntityToMap(),
	function isValidTile(),
	function getHighlighter(),
	function getMapSize(),
	function screenToTile(),
	function spawnAttackEffect(),
	function queryActorsInRange(),
	function clearBlockedTileHighlights(),
	function spawnProjectileEffect(),
	function update(),
	function isValidTileSquare(),
	function worldToTile(),
	function calculateTacticalValuesForTerrain(),
	function addResource(),
	function setActive(),
	function clearVisibility(),
	function clearScene(),
	function spawnSpriteEffect(),
	function getTemporaryRoster(),
	function getRetreatRoster(),
	function getCasualtyRoster(),
	function getShaker(),
	function fillHeat(),
	function spawnIconEffect(),
	function spawnPoolEffect(),
	function createBlockedTileHighlights()},

Tactical.Entities = {
	getInstancesOfFaction(),	// get all the instance by faction ex: local brothers = this.Tactical.Entities.getInstancesOfFaction(this.Const.Faction.Player);
	getMoney(),
	getStash(),}


/*************************************************
* from here we start to describe the script World.
* it is the entry point for almost all the state 
* script and the manager script.
*
* you can find all the details in the script 
* scripts/states/world_state method onInit
*
* this.World.Assets access to the game session asset like money,medicine, etc
* this.World.Events access to the scripts/events/event_manager
*
*
**************************************************/

World = {	
	function spawnEntity(),
	function __sqrat_ol_ spawnEntity_1(),
	function __sqrat_ol_ spawnEntity_2(),
	function __sqrat_ol_ spawnEntity_3(),
	function getEntityAtPos(),
	function __sqrat_ol_ getEntityAtPos_1(),
	function __sqrat_ol_ getEntityAtPos_2(),
	function getTile(),
	function __sqrat_ol_ getTile_1(),
	function __sqrat_ol_ getTile_2(),
	function spawnLocation(),
	function __sqrat_ol_ spawnLocation_1(),
	function __sqrat_ol_ spawnLocation_2(),
	function __sqrat_ol_ spawnLocation_3(),
	function spawnParticleEffect(),
	function __sqrat_ol_ spawnParticleEffect_8(),
	function __sqrat_ol_ spawnParticleEffect_9(),
	function tileToWorld(),
	function __sqrat_ol_ tileToWorld_1(),
	function __sqrat_ol_ tileToWorld_2(),
	function canLoad(),
	function load(),
	function presave(),
	function save(),
	function getSpeedMult(), // Checks world speed multiplier (0, 1 or 2 in vanilla, swifter and similar allow for higher values)
	function setSpeedMult(), // Sets world speed multiplier
	function queryTilesInRange(),
	function prepareRender(),
	function getEntityByID(),
	function findNextTileOfType(),
	function setVisible(),
	function resizeScene(),
	function getPlayerVisionRadius(),
	function setAmbientColor(),
	function getNavigator(),
	function setOnBeforeSaveCallback(),
	function isValidTile(),
	function setOnLoadCallback(),
	function screenToTile(),
	function clearTiles(),
	function update(),
	function deleteRoster(),
	function isValidTileSquare(),
	function updateTilesWithHeat(),
	function setOnBeforeLoadCallback(),
	function setFogOfWar(),
	function isDaytime(),
	function getAllRosters(),
	function getAllEntitiesAndOneLocationAtPos(),
	function getTileSquare(),
	function findNextRegion(),
	function render(),
	function getWeather(),
	function spawnRegionText(),
	function getTemporaryRoster(),
	function getDirection8FromTo(),
	function setOnSaveCallback(),
	function setPlayerVisionRadius(),
	function getAllEntitiesVisibleAtPos(),
	function move(),
	function getRoster(),
	function getAllTilesOfRegion(),
	function getTime(),
	function getAllEntitiesAtPos(),
	function getEntityAtTile(),
	function getGlobalVisibilityMult(),
	function worldToTile(),
	function uncoverFogOfWar(),
	function getAllFootprintsAtPos(),
	function getCamera(),
	function spawnWaveSprite(),
	function getNumOfTilesWithType(),
	function getGuestRoster(),
	function isUsingFogOfWar(),
	function isVisible(),
	function getMapSize(),
	function setPlayerPos(),
	function spawnFootprint(),
	function createRoster(),
	function getPlayerPos(),
	function getPlayerRoster(),		//ex: local playerRoster = this.World.getPlayerRoster().getAll();
	function getPlayerEntity(),
	function clearScene()},

World.Assets = {
	addMoney(),			  	// ex this.World.Assets.addMoney(10000); ad 10000 to the money
	getMoney()				// ex this.World.Assets.getMoney() >= 2000
	addArmorParts(),		//ex. this.World.Assets.addArmorParts(amount);	 add the tools to the team
	getArmorParts(),		
	addMedicine(),			//ex. this.World.Assets.addMedicine(amount);	
	getMedicine(),
	addAmmo(),				//ex: this.World.Assets.addAmmo(this.m.Amount);
	getAmmo(),				
	addBusinessReputation(),	// ex this.World.Assets.addBusinessReputation(500);
	getFood(),	
	getStash(),				//this.World.Assets.getStash()	teh stash is the bug of all the brothers!
	setConsumingAssets(), 	//ex. this.World.Assets.setConsumingAssets(!this.World.Assets.isConsumingAssets()); the player will not consume more food or medicine or tools? never tested
	setFogOfWar(),			//ex. this.World.Assets.setFogOfWar(!this.World.Assets.isUsingFogOfWar()); the game will not have fog of war	
	
},

Stash = {				
	clear();				//ex this.World.Assets.getStash().clear()
	resize(117);			//ex this.World.Assets.getStash().resize(117)
	setLocked(false);		//ex this.World.Assets.getStash().setLocked(false)
	add();					//ex this.World.Assets.getStash().add(this.new("scripts/items/supplies/bread_item"));
															      
}

World.Events = {
	fire();					//ex this.World.Events.fire("event.lone_wolf_scenario_intro");
}


/*************************************************
* ACTOR DETAILS
*
* - attributes values -
* from here we list all the based properties of an entity
* all the possible properties are defined in the consatnt gt.Const.CharacterProperties
* script/config/character.nut
* this properties are accessed and modified by the skill during the tactical screen
**************************************************/
BaseProperties = {	//accessible by actor.m.BaseProperties or actor.getBaseProperties()
}	


/*************************************************
* ACTOR DETAILS
*
* - item equiped -
* are mainatined in the m.Items object or getItems()
* of the scripts/entity/tactical/actor.nut
* this object is a container: scripts/items/item_container
**************************************************/
Items = {	//accessible by actor.m.Items or actor.getItems(), this object is a container scripts/items/item_container
	//access specific object equiped
	actor.m.Items.getItemAtSlot(this.Const.ItemSlot.Mainhand);	
	//test specific object if equipped	
	actor.m.Items.hasEmptySlot(this.Const.ItemSlot.Mainhand)	
	//euiqp specific object
	actor.m.Items.equip(this.new("scripts/items/weapons/named/named_greatsword"));	
	//unequip specific object
	actor.m.Items.unequip(actor.m.Items.getItemAtSlot(this.Const.ItemSlot.Head));	
	//add object to the bag		
	actor.m.Items.addToBag(this.new("scripts/items/weapons/throwing_axe"));
}





IO = {
	function enumerateFiles(), // returns an array of strings with each string being the path for a file in the folder whose path was passed when calling this function
	function scriptHashByFilename(), // converts a full path to a BB object into a hash
	function scriptFilenameByHash()}, // converts a hash created by scriptHashByFilename back into a full path

Time = {	//accessible by this.World.getTime()
	function getFPS(),
	function getDelta(), // difference between last 2 frames
	function getVirtualTimeF(), // returns game time since the start of the save
	function getExactTime(), // returns precise time since game launch
	function setRound(),
	function setVirtualSpeed(),
	function clearEvents(),
	function getVirtualTime(),
	function hasEventScheduled(),
	function setVirtualTime(),
	function getVirtualSpeed(),
	function getRound(),
	function getVirtualDelta(),
	function getRealTime(),
	function getFrame(),
	function getRealTimeF(),
	function scheduleEvent(),
	function IsDaytime(),
	Day,				//this.World.getTime().Days > 20
	SecondsPerDay},		//this.World.getTime().SecondsPerDay

Music = {
	function setTrackList(),
	function __sqrat_ol_ setTrackList_2(),
	function __sqrat_ol_ setTrackList_3(),
	function isPlaying()},

Settings = {
	function load(),
	function save(),
	function queryResolutionByIndex(),
	function getTempGameplaySettings(),
	function getControlSettings(),
	function setHardwareSound(),
	function getGameplaySettings(),
	function isHardwareSound(),
	function queryResolutions(),
	function setSoundVolume(),
	function setVideoMode(),
	function queryResolutionIndexByVideoMode(),
	function getVideoMode(),
	function saveWithCustomVideoMode(),
	function getSoundVolume()},

UI = {
	function getCursorOffsets(),
	function setCursorHardware(),
	function getCursorSize(),
	function setCursorPosition(),
	function connect(),
	function isMouseOver(),
	function disconnect(),
	function getCursorPosition(),
	function setCursor(),
	function isCursorHardware()},

GameInfo = {
	function getBuildName(),
	function getRevisionNumber(),
	function getBuildDate(),
	function getCompany(),
	function getVersionNumber(),
	function getVersionName()},

TimeUnit = {
	Real = 0,
	Virtual = 1,
	Rounds = 2},
	
Sound = {
	function setAmbience(),
	function stopAmbience(),
	function play(),
	function __sqrat_ol_ play_1(),
	function __sqrat_ol_ play_2(),
	function __sqrat_ol_ play_3(),
	function __sqrat_ol_ play_4(),
	function update(),
	function setAmbienceVolume()},	
	
